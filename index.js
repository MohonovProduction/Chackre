const { Telegraf, session, Scenes: { WizardScene, Stage }, Markup } = require('telegraf')
const fs = require('fs')
const ASSETS_URL = 'src/assets/'
const { Config } = require('./BotConfig')
const { Admin } = require('./src/models/Admin')
const fucks = require('./' + ASSETS_URL + 'fuck')
const jokes = require('./' + ASSETS_URL + 'jokes')
const gachies = require('./' + ASSETS_URL + 'gachi')

//Scenes
const close_scene = Markup.inlineKeyboard(
	[Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]
)

const addJoke = new WizardScene(
	'addJoke',
	ctx => {
		ctx.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–Ω–µ–∫–¥–æ—Ç', close_scene)
		return ctx.wizard.next()
	},
	ctx => {
		if (ctx?.message?.text) {
			jokes[jokes.length] = ctx.message.text

			const data = 'module.exports = ' + JSON.stringify(jokes)
			fs.writeFile(ASSETS_URL + 'jokes.js', data, err => {
				let answer = (err) ? err : '–ê–Ω–µ–∫–¥–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚ò∫Ô∏è'
				ctx.reply(answer)
			})
			return ctx.scene.leave();
		} else { 
			return ctx.scene.leave(); 
		}
	},
)

const addGachi = new WizardScene(
	'addGachi',
	ctx => {
		ctx.reply('‚ôÇ –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π –≥–∞—á–∏ —Ä–µ–º–∏–∫—Å ‚ôÇ', close_scene)
		ctx.wizard.next()
	},
	ctx => {
		const msg = 'check gachi'
		if (!ctx?.message?.text) return ctx.scene.leave()
		console.log(msg, false)
		if (!ctx.message.text.match(/https:/)) { 
			ctx.reply('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞')
			return ctx.scene.leave()
		}
		console.log(msg, false)
		for (el of gachies) {
			if (el === ctx.message.text) {
				ctx.reply('—Ç–∞–∫–æ–µ –≤–∏–¥–µ–æ —É–∂–µ –µ—Å—Ç—å')
				return ctx.scene.leave() 
				break
			} 
		}
		console.log(msg, false)

		gachies[gachies.length] = ctx.message.text
		const data = 'module.exports = ' + JSON.stringify(gachies)

		fs.writeFile(ASSETS_URL + 'gachi.js', data, err => {
			let answer = (err) ? err : '–ì–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ üòè'
			ctx.reply(answer)
		})
		return ctx.scene.leave();
	}
)

const fuckEmoji = 'üòà,ü§¨,üò°,üò§,üò†,üëø,üë∫,üëπ,ü¶π‚Äç‚ôÇÔ∏è,!!!'

const addFuck = new WizardScene(
	'addFuck',
	ctx => {
		ctx.reply('–í—ã—Å–∫–∞–∂–∏ –≤—Å—ë, —á—Ç–æ –¥—É–º–∞–µ—à—å ü§¨', close_scene)
		ctx.wizard.next()
	},
	ctx => {
		const msg = 'fuck check'
		if (!ctx?.message?.text) return ctx.scene.leave()
		console.log(msg, false)
		for (el of fucks) {
			if (el === ctx.message.text) {
				ctx.reply('–¢–∞–∫ —É–∂–µ –ø–æ—Å—ã–ª–∞–ª–∏ üòà')
				return ctx.scene.leave() 
				break
			} 
		}
		console.log(msg, false)

		fucks[fucks.length] = ctx.message.text + ' ' + getRandomEl(fuckEmoji.split(','))
		const data = 'module.exports = ' + JSON.stringify(fucks)

		fs.writeFile(ASSETS_URL + 'fuck.js', data, err => {
			let answer = (err) ? err : '–ì–Ω–µ–≤ –∑–∞–ø–µ—á–∞—Ç–ª—ë–Ω üòà'
			ctx.reply(answer)
		})
		return ctx.scene.leave();
	}
)

const stage = new Stage();

stage.register(addJoke)
stage.register(addGachi)
stage.register(addFuck)

//Create
require('dotenv').config()
console.log(process.env.BOT_TOKEN)
const bot = new Telegraf(process.env.BOT_TOKEN)
bot.use(session())
bot.use(stage.middleware())
bot.telegram.setMyCommands(Config.commands);

//Main
bot.start(ctx => ctx.reply('start'))
bot.help(ctx => ctx.reply('help'))

bot.command('love', ctx => ctx.reply('–õ—é–±–ª—é, —Ü–µ–ª—É—é, –æ–±–Ω–∏–º–∞—é ‚ù§'))
bot.command('fuck', ctx => ctx.reply(getRandomEl(fucks)))
//bot.command('scan', ctx => ctx.reply(Admin.scan(ctx), { parse_mode: 'Markdown' }))
bot.on('voice', ctx => ctx.reply('–ü–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å —á–µ–ª–æ–≤–µ–∫–æ–º'))
bot.on('video_note', ctx => ctx.reply('–í–∏–∂—É –∫–æ—Ç–∏–∫–∞ üòº'))

const jokeKey = /–∞–Ω–µ–∫/i 
bot.hears(jokeKey, ctx => ctx.reply(getRandomEl(jokes)))

const gachiKey = /–≥–∞—á–∏|—Ñ–∏—Å—Ç–∏–Ω–≥|–∂–æ–ø|—è–π—Ü|–∞–Ω–∞–ª|—Ñ–∏–Ω–≥–µ—Ä|–¥—Ä–∞—Ç—å|–µ–±/i
bot.hears(gachiKey, ctx => ctx.reply(getRandomEl(gachies)))

function getRandomEl(arr) {
	const id = Math.floor(Math.random() * arr.length)
	return arr[id]
}

bot.command('add', (ctx) => {
	const inline_keyboard = Markup.inlineKeyboard([
		[ Markup.button.callback('–ê–Ω–µ–∫–¥–æ—Ç', 'joke') ],
		[ Markup.button.callback('–ì–∞—á–∏ —Ä–µ–º–∏–∫—Å', 'gachi') ],
		[ Markup.button.callback('–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', 'fuck') ]
	])

	ctx.reply('–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?', inline_keyboard)
})

bot.action('joke', ctx => ctx.scene.enter('addJoke'))
bot.action('gachi', ctx => ctx.scene.enter('addGachi'))
bot.action('fuck', ctx => ctx.scene.enter('addFuck'))

bot.action('cancel', ctx => { ctx.reply('–æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'); ctx.scene.leave() })

bot.launch()
